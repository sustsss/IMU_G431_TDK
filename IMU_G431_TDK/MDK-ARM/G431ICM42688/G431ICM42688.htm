<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [G431ICM42688\G431ICM42688.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image G431ICM42688\G431ICM42688.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6070001: Last Updated: Thu Jul 25 21:57:53 2024
<BR><P>
<H3>Maximum Stack Usage =        412 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; UART1_Printf &rArr; UART1_SendString &rArr; UART1_SendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">GyroBiasTrackerFxp_Reset</a>
 <LI><a href="#[6d]">GyroBiasTrackerFxp_SetBias</a>
 <LI><a href="#[6f]">GyroBiasTrackerFxp_SetCustomParams</a>
 <LI><a href="#[71]">GyroBiasTrackerFxp_UpdateAccData</a>
 <LI><a href="#[7c]">GyroBiasTrackerFxp_UpdateGyrData</a>
 <LI><a href="#[7e]">GyroBiasTrackerFxp_UpdateMagData</a>
 <LI><a href="#[80]">GyroCalFnmFxp_Init</a>
 <LI><a href="#[12e]">GyroCalFnmFxp_Recalibrate</a>
 <LI><a href="#[c6]">GyroCalFnmFxp_SetCustomParam</a>
 <LI><a href="#[c7]">GyroCalFnmFxp_SetSamplingPeriod</a>
 <LI><a href="#[82]">GyroCalFnmFxp_UpdateData</a>
 <LI><a href="#[81]">InterfaceCalibrationGyrFxp_Reset</a>
 <LI><a href="#[bd]">InterfaceOrientation_Reset</a>
 <LI><a href="#[be]">InvnAlgoASF_Init_r</a>
 <LI><a href="#[c4]">InvnAlgoASF_SetConfig_r</a>
 <LI><a href="#[c3]">PredictiveQuaternionFxp_Init</a>
 <LI><a href="#[ce]">PredictiveQuaternionFxp_SetParam</a>
 <LI><a href="#[cd]">PredictiveQuaternionFxp_SetSamplingPeriod</a>
 <LI><a href="#[ee]">PredictiveQuaternionFxp_Update</a>
 <LI><a href="#[c0]">RlsCalibrationFxp_Init</a>
 <LI><a href="#[c1]">RlsCalibrationFxp_SetAccuracy</a>
 <LI><a href="#[c9]">RlsCalibrationFxp_SetDefaultParamAcc</a>
 <LI><a href="#[c8]">RlsCalibrationFxp_SetDefaultParamMag</a>
 <LI><a href="#[f0]">RlsCalibrationFxp_UpdateGyrData</a>
 <LI><a href="#[f2]">RlsCalibrationFxp_UpdateUncalibrated</a>
 <LI><a href="#[f7]">RlsCalibrationFxp_UpdateUncalibratedData</a>
 <LI><a href="#[bf]">SphericalFxp_Init</a>
 <LI><a href="#[cb]">SphericalFxp_SetCustomParamAcc</a>
 <LI><a href="#[ca]">SphericalFxp_SetCustomParamGyr</a>
 <LI><a href="#[cc]">SphericalFxp_SetCustomParamMag</a>
 <LI><a href="#[c2]">SphericalFxp_SetProductId</a>
 <LI><a href="#[fb]">SphericalFxp_UpdateAccData</a>
 <LI><a href="#[fe]">SphericalFxp_UpdateGyrData</a>
 <LI><a href="#[104]">SphericalFxp_UpdateMagData</a>
 <LI><a href="#[fd]">fxpAdaptiveFilter</a>
 <LI><a href="#[76]">fxpRecursiveVariance</a>
 <LI><a href="#[f3]">fxpRecursiveVariance3_q30</a>
 <LI><a href="#[ff]">fxpScaleAndSaturate</a>
 <LI><a href="#[127]">gyro_cal_computeMoment</a>
 <LI><a href="#[83]">gyro_cal_fnm</a>
 <LI><a href="#[73]">inv_vector3_err_Q30</a>
 <LI><a href="#[7d]">inv_vector3_norm_Q30</a>
 <LI><a href="#[12c]">inverse_sqrt_q15_with_pow</a>
 <LI><a href="#[b9]">invn_algo_asf_generate_config</a>
 <LI><a href="#[ba]">invn_algo_asf_init</a>
 <LI><a href="#[107]">invn_algo_asf_process</a>
 <LI><a href="#[101]">invn_angle_from_acc_correction_fxp</a>
 <LI><a href="#[102]">invn_angle_from_mag_correction_fxp</a>
 <LI><a href="#[79]">invn_cross_product_q30</a>
 <LI><a href="#[133]">invn_get_highest_bit_position</a>
 <LI><a href="#[7a]">invn_integrate_gyro_approx4_fxp</a>
 <LI><a href="#[f1]">invn_integrate_gyro_fast_trigo_fxp</a>
 <LI><a href="#[131]">invn_math_cos_q30_fxp</a>
 <LI><a href="#[fa]">invn_math_divide_q30_fxp</a>
 <LI><a href="#[130]">invn_math_inv_sqrt_q30_fxp</a>
 <LI><a href="#[70]">invn_math_inverse_fxp</a>
 <LI><a href="#[134]">invn_math_inverse_q30_fxp</a>
 <LI><a href="#[f4]">invn_math_mult_q15_fxp</a>
 <LI><a href="#[77]">invn_math_mult_q29_fxp</a>
 <LI><a href="#[6e]">invn_math_mult_q30_fxp</a>
 <LI><a href="#[103]">invn_math_quat_invert_fxp</a>
 <LI><a href="#[ef]">invn_math_quat_mult_fxp</a>
 <LI><a href="#[72]">invn_math_quat_rotate_BtoI_fxp</a>
 <LI><a href="#[7b]">invn_math_quat_rotate_ItoB_fxp</a>
 <LI><a href="#[132]">invn_math_sin_q30_fxp</a>
 <LI><a href="#[f5]">invn_math_sqrt_q15_fxp</a>
 <LI><a href="#[12b]">invn_math_sqrt_q30_fxp</a>
 <LI><a href="#[12f]">invn_normalize_quaternion_q30</a>
 <LI><a href="#[78]">invn_normalize_vector_q30</a>
 <LI><a href="#[fc]">invn_quat_6x_correction_fxp</a>
 <LI><a href="#[12d]">invn_quat_to_gravity_fxp</a>
 <LI><a href="#[f6]">rls_core_Bierman4_fxp</a>
 <LI><a href="#[7f]">rls_core_Carlson4_fxp</a>
 <LI><a href="#[128]">inv_icm426xx_inline_authenticate_device</a>
 <LI><a href="#[74]">GyroBiasTrackerFxp_ValidateBias.part.0</a>
 <LI><a href="#[75]">GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1</a>
 <LI><a href="#[100]">SphericalFxp_UpdateMag.part.0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC1_2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[43]">COMP1_2_3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[44]">COMP4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4e]">CORDIC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[45]">CRS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4c]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1e]">FDCAN1_IT0_IRQHandler</a> from stm32g4xx_it.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4f]">FMAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[47]">FPU_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2b]">I2C2_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2a]">I2C2_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4b]">I2C3_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4a]">I2C3_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[38]">LPTIM1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[49]">LPUART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text.NMI_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32g4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[48]">RNG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[32]">RTC_Alarm_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[46]">SAI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from main.o(.text.SPI1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32g4xx_it.o(.text.SVC_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[21]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[22]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3b]">TIM6_DAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[42]">UCPD1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[30]">USART3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[33]">USBWakeUp_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1c]">USB_HP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1d]">USB_LP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[56]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[50]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[53]">read_reg_asf</a> from main.o(.text.read_reg_asf) referenced 2 times from main.o(.text.ICM_INT)
 <LI><a href="#[55]">sleep_us_asf</a> from main.o(.text.sleep_us_asf) referenced 2 times from main.o(.text.ICM_INT)
 <LI><a href="#[54]">write_reg_asf</a> from main.o(.text.write_reg_asf) referenced 2 times from main.o(.text.ICM_INT)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[57]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[68]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[144]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[145]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[146]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[147]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[148]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10b]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[149]"></a>____aeabi_memcpy$ret$move</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>____aeabi_memcpy4$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[129]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm426xx_inline_authenticate_device
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceOrientation_Reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceCalibrationGyrFxp_Reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_Reset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetBias
</UL>

<P><STRONG><a name="[12a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm426xx_inline_authenticate_device
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[153]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[154]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[155]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN_LED_TOG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.CAN_LED_TOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_LED_TOG &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[1e]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GyroBiasTrackerFxp_Reset</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GyroBiasTrackerFxp_Reset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[6d]"></a>GyroBiasTrackerFxp_SetBias</STRONG> (Thumb, 524 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_SetBias))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GyroBiasTrackerFxp_SetBias &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[6f]"></a>GyroBiasTrackerFxp_SetCustomParams</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_SetCustomParams))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[71]"></a>GyroBiasTrackerFxp_UpdateAccData</STRONG> (Thumb, 1080 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_UpdateAccData))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_vector3_err_Q30
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_ValidateBias.part.0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_approx4_fxp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[7c]"></a>GyroBiasTrackerFxp_UpdateGyrData</STRONG> (Thumb, 716 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_UpdateGyrData))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_vector3_norm_Q30
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_approx4_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[7e]"></a>GyroBiasTrackerFxp_UpdateMagData</STRONG> (Thumb, 1128 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_UpdateMagData))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_vector3_err_Q30
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_ValidateBias.part.0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_approx4_fxp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[80]"></a>GyroCalFnmFxp_Init</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.GyroCalFnmFxp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GyroCalFnmFxp_Init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceCalibrationGyrFxp_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[12e]"></a>GyroCalFnmFxp_Recalibrate</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.GyroCalFnmFxp_Recalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[c6]"></a>GyroCalFnmFxp_SetCustomParam</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.GyroCalFnmFxp_SetCustomParam))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[c7]"></a>GyroCalFnmFxp_SetSamplingPeriod</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.GyroCalFnmFxp_SetSamplingPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[82]"></a>GyroCalFnmFxp_UpdateData</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.GyroCalFnmFxp_UpdateData))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal_fnm
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[dc]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 550 bytes, Stack size 44 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_ErrorStatusCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[84]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_HighPriorityMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 716 bytes, Stack size 56 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 738 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, fdcan.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetFDCANClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, main.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_RxFifo1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TimeoutOccurredCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TimestampWraparoundCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_TxBufferAbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_TxBufferCompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_TxEventFifoCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HAL_GPIO_Init</STRONG> (Thumb, 898 bytes, Stack size 56 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[91]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[99]"></a>HAL_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>HAL_InitTick</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32g4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32g4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[9a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ed]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_UART_Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_MspInit</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UART_Transmit</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>ICM_INT</STRONG> (Thumb, 890 bytes, Stack size 144 bytes, main.o(.text.ICM_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ICM_INT &rArr; icm42688_write_reg &rArr; ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_generate_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_write_reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_LOW
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_HIGH
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>ICM_SPI_CS_HIGH</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text.ICM_SPI_CS_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICM_SPI_CS_HIGH &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_write_reg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_read_reg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[b5]"></a>ICM_SPI_CS_LOW</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text.ICM_SPI_CS_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_write_reg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_read_reg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[81]"></a>InterfaceCalibrationGyrFxp_Reset</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, interface_calibration_gyr_fxp.c.obj(.text.InterfaceCalibrationGyrFxp_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InterfaceCalibrationGyrFxp_Reset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_Init
</UL>

<P><STRONG><a name="[bd]"></a>InterfaceOrientation_Reset</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, interface_orientation_fxp.c.obj(.text.InterfaceOrientation_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InterfaceOrientation_Reset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_Init
</UL>

<P><STRONG><a name="[be]"></a>InvnAlgoASF_Init_r</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.InvnAlgoASF_Init_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InvnAlgoASF_Init_r &rArr; PredictiveQuaternionFxp_Init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetProductId
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_SetAccuracy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetBias
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_init
</UL>

<P><STRONG><a name="[c4]"></a>InvnAlgoASF_SetConfig_r</STRONG> (Thumb, 464 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.InvnAlgoASF_SetConfig_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InvnAlgoASF_SetConfig_r &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_SetParam
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_SetSamplingPeriod
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamMag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamAcc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_Reset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetCustomParams
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_SetDefaultParamAcc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_SetDefaultParamMag
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_SetSamplingPeriod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_SetCustomParam
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamGyr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[cf]"></a>LL_GPIO_Init</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d6]"></a>LL_SPI_Init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32g4xx_ll_spi.o(.text.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_SPI_Init &rArr; LL_SPI_SetRxFIFOThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetRxFIFOThreshold
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetCRCPolynomial
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[11f]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[da]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, fdcan.o(.text.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>MX_GPIO_Init</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>MX_SPI1_Init</STRONG> (Thumb, 320 bytes, Stack size 136 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetStandard
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_EnableNSSPulseMgt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_EnableIT_RXNE
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>PredictiveQuaternionFxp_Init</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, predictive_quaternion_fxp.c.obj(.text.PredictiveQuaternionFxp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = PredictiveQuaternionFxp_Init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[ce]"></a>PredictiveQuaternionFxp_SetParam</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, predictive_quaternion_fxp.c.obj(.text.PredictiveQuaternionFxp_SetParam))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[cd]"></a>PredictiveQuaternionFxp_SetSamplingPeriod</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, predictive_quaternion_fxp.c.obj(.text.PredictiveQuaternionFxp_SetSamplingPeriod))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[ee]"></a>PredictiveQuaternionFxp_Update</STRONG> (Thumb, 342 bytes, Stack size unknown bytes, predictive_quaternion_fxp.c.obj(.text.PredictiveQuaternionFxp_Update))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[c0]"></a>RlsCalibrationFxp_Init</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RlsCalibrationFxp_Init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[c1]"></a>RlsCalibrationFxp_SetAccuracy</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_SetAccuracy))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[c9]"></a>RlsCalibrationFxp_SetDefaultParamAcc</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_SetDefaultParamAcc))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[c8]"></a>RlsCalibrationFxp_SetDefaultParamMag</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_SetDefaultParamMag))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[f0]"></a>RlsCalibrationFxp_UpdateGyrData</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_UpdateGyrData))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[f2]"></a>RlsCalibrationFxp_UpdateUncalibrated</STRONG> (Thumb, 3190 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_UpdateUncalibrated))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Bierman4_fxp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_sqrt_q15_fxp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q15_fxp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance3_q30
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibratedData
</UL>

<P><STRONG><a name="[f7]"></a>RlsCalibrationFxp_UpdateUncalibratedData</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, rls_calibration_fxp.c.obj(.text.RlsCalibrationFxp_UpdateUncalibratedData))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_IRQHandler &rArr; LL_SPI_ReceiveData8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>SYS_LED_TOG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.SYS_LED_TOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYS_LED_TOG &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bf]"></a>SphericalFxp_Init</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SphericalFxp_Init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceOrientation_Reset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_divide_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[cb]"></a>SphericalFxp_SetCustomParamAcc</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_SetCustomParamAcc))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[ca]"></a>SphericalFxp_SetCustomParamGyr</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_SetCustomParamGyr))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_divide_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[cc]"></a>SphericalFxp_SetCustomParamMag</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_SetCustomParamMag))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_divide_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_SetConfig_r
</UL>

<P><STRONG><a name="[c2]"></a>SphericalFxp_SetProductId</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_SetProductId))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
</UL>

<P><STRONG><a name="[fb]"></a>SphericalFxp_UpdateAccData</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_UpdateAccData))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpAdaptiveFilter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_6x_correction_fxp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[fe]"></a>SphericalFxp_UpdateGyrData</STRONG> (Thumb, 480 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_UpdateGyrData))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpScaleAndSaturate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[104]"></a>SphericalFxp_UpdateMagData</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_UpdateMagData))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 1900 bytes, Stack size 64 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; UART1_Printf &rArr; UART1_SendString &rArr; UART1_SendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_read_reg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yaw
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_roll
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pitch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Printf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LED_TOG
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LED_TOG
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_mounting_matrix
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>SystemClock_Config</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetFDCANClockSource
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_EnableDomain_SYS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_ConfigDomain_SYS
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_EnableBypass
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableRange1BoostMode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>UART1_Printf</STRONG> (Thumb, 64 bytes, Stack size 144 bytes, usart.o(.text.UART1_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = UART1_Printf &rArr; UART1_SendString &rArr; UART1_SendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10e]"></a>UART1_SendByte</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text.UART1_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = UART1_SendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
</UL>

<P><STRONG><a name="[122]"></a>UART1_SendString</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usart.o(.text.UART1_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = UART1_SendString &rArr; UART1_SendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Printf
</UL>

<P><STRONG><a name="[ad]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[af]"></a>UART_CheckIdleState</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>UART_SetConfig</STRONG> (Thumb, 1420 bytes, Stack size 88 bytes, stm32g4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b2]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, stm32g4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>fxpAdaptiveFilter</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, invn_signal_processing_fxp.c.obj(.text.fxpAdaptiveFilter))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_divide_q30_fxp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
</UL>

<P><STRONG><a name="[76]"></a>fxpRecursiveVariance</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, invn_signal_processing_fxp.c.obj(.text.fxpRecursiveVariance))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_ValidateBias.part.0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateGyrData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[f3]"></a>fxpRecursiveVariance3_q30</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.fxpRecursiveVariance3_q30))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
</UL>

<P><STRONG><a name="[ff]"></a>fxpScaleAndSaturate</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, invn_signal_processing_fxp.c.obj(.text.fxpScaleAndSaturate))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[109]"></a>get_pitch</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, main.o(.text.get_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_pitch &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10a]"></a>get_roll</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, main.o(.text.get_roll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_roll &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[108]"></a>get_yaw</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, main.o(.text.get_yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_yaw &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[127]"></a>gyro_cal_computeMoment</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.gyro_cal_computeMoment))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal_fnm
</UL>

<P><STRONG><a name="[83]"></a>gyro_cal_fnm</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, gyro_cal_fnm_fxp.c.obj(.text.gyro_cal_fnm))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal_computeMoment
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_UpdateData
</UL>

<P><STRONG><a name="[105]"></a>icm42688_read_reg</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, main.o(.text.icm42688_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icm42688_read_reg &rArr; ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_LOW
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_HIGH
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg_asf
</UL>

<P><STRONG><a name="[b8]"></a>icm42688_write_reg</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main.o(.text.icm42688_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm42688_write_reg &rArr; ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_LOW
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_HIGH
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg_asf
</UL>

<P><STRONG><a name="[73]"></a>inv_vector3_err_Q30</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.inv_vector3_err_Q30))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_sqrt_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[7d]"></a>inv_vector3_norm_Q30</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.inv_vector3_norm_Q30))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_sqrt_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[12c]"></a>inverse_sqrt_q15_with_pow</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.inverse_sqrt_q15_with_pow))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q15_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Carlson4_fxp
</UL>

<P><STRONG><a name="[b9]"></a>invn_algo_asf_generate_config</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.invn_algo_asf_generate_config))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[ba]"></a>invn_algo_asf_init</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.invn_algo_asf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = invn_algo_asf_init &rArr; inv_icm426xx_inline_authenticate_device &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvnAlgoASF_Init_r
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm426xx_inline_authenticate_device
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[107]"></a>invn_algo_asf_process</STRONG> (Thumb, 1692 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.invn_algo_asf_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = invn_algo_asf_process &rArr; GyroBiasTrackerFxp_SetBias &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_Recalibrate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalFnmFxp_UpdateData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetBias
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMagData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibratedData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_to_gravity_fxp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Update
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateGyrData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamGyr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateGyrData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateGyrData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>invn_angle_from_acc_correction_fxp</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_angle_from_acc_correction_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
</UL>

<P><STRONG><a name="[102]"></a>invn_angle_from_mag_correction_fxp</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_angle_from_mag_correction_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
</UL>

<P><STRONG><a name="[79]"></a>invn_cross_product_q30</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.invn_cross_product_q30))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_6x_correction_fxp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_acc_correction_fxp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_mag_correction_fxp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[133]"></a>invn_get_highest_bit_position</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, invn_binary.c.obj(.text.invn_get_highest_bit_position))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_fxp
</UL>

<P><STRONG><a name="[7a]"></a>invn_integrate_gyro_approx4_fxp</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_integrate_gyro_approx4_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_quaternion_q30
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[f1]"></a>invn_integrate_gyro_fast_trigo_fxp</STRONG> (Thumb, 420 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_integrate_gyro_fast_trigo_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_sin_q30_fxp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_cos_q30_fxp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inv_sqrt_q30_fxp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_quaternion_q30
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_6x_correction_fxp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateGyrData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[131]"></a>invn_math_cos_q30_fxp</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, invn_geometry_fxp.c.obj(.text.invn_math_cos_q30_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
</UL>

<P><STRONG><a name="[fa]"></a>invn_math_divide_q30_fxp</STRONG> (Thumb, 420 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_divide_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpAdaptiveFilter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamMag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_SetCustomParamGyr
</UL>

<P><STRONG><a name="[130]"></a>invn_math_inv_sqrt_q30_fxp</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_inv_sqrt_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_quaternion_q30
</UL>

<P><STRONG><a name="[70]"></a>invn_math_inverse_fxp</STRONG> (Thumb, 560 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_inverse_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_get_highest_bit_position
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_SetSamplingPeriod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetCustomParams
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Update
</UL>

<P><STRONG><a name="[134]"></a>invn_math_inverse_q30_fxp</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_inverse_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Carlson4_fxp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Bierman4_fxp
</UL>

<P><STRONG><a name="[f4]"></a>invn_math_mult_q15_fxp</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_mult_q15_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15_with_pow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Carlson4_fxp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Bierman4_fxp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
</UL>

<P><STRONG><a name="[77]"></a>invn_math_mult_q29_fxp</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_mult_q29_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_6x_correction_fxp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_acc_correction_fxp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_mag_correction_fxp
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_sin_q30_fxp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_cos_q30_fxp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_to_gravity_fxp
</UL>

<P><STRONG><a name="[6e]"></a>invn_math_mult_q30_fxp</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_mult_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpAdaptiveFilter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_ValidateBias.part.0
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance3_q30
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_SetParam
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_SetSamplingPeriod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_SetBias
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[103]"></a>invn_math_quat_invert_fxp</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, invn_quaternion_fxp.c.obj(.text.invn_math_quat_invert_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
</UL>

<P><STRONG><a name="[ef]"></a>invn_math_quat_mult_fxp</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, invn_quaternion_fxp.c.obj(.text.invn_math_quat_mult_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_approx4_fxp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictiveQuaternionFxp_Update
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateGyrData
</UL>

<P><STRONG><a name="[72]"></a>invn_math_quat_rotate_BtoI_fxp</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, invn_quaternion_fxp.c.obj(.text.invn_math_quat_rotate_BtoI_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
</UL>

<P><STRONG><a name="[7b]"></a>invn_math_quat_rotate_ItoB_fxp</STRONG> (Thumb, 282 bytes, Stack size unknown bytes, invn_quaternion_fxp.c.obj(.text.invn_math_quat_rotate_ItoB_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMag.part.0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[132]"></a>invn_math_sin_q30_fxp</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, invn_geometry_fxp.c.obj(.text.invn_math_sin_q30_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
</UL>

<P><STRONG><a name="[f5]"></a>invn_math_sqrt_q15_fxp</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_sqrt_q15_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
</UL>

<P><STRONG><a name="[12b]"></a>invn_math_sqrt_q30_fxp</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, invn_scalar_algebra_fxp.c.obj(.text.invn_math_sqrt_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_vector3_norm_Q30
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_vector3_err_Q30
</UL>

<P><STRONG><a name="[12f]"></a>invn_normalize_quaternion_q30</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.invn_normalize_quaternion_q30))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inv_sqrt_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_approx4_fxp
</UL>

<P><STRONG><a name="[78]"></a>invn_normalize_vector_q30</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.invn_normalize_vector_q30))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inv_sqrt_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_quat_6x_correction_fxp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_acc_correction_fxp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_mag_correction_fxp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[fc]"></a>invn_quat_6x_correction_fxp</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_quat_6x_correction_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_normalize_vector_q30
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateAccData
</UL>

<P><STRONG><a name="[12d]"></a>invn_quat_to_gravity_fxp</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, orientation_utils_fxp.c.obj(.text.invn_quat_to_gravity_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q29_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_process
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_SPI1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f6]"></a>rls_core_Bierman4_fxp</STRONG> (Thumb, 926 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.rls_core_Bierman4_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q15_fxp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RlsCalibrationFxp_UpdateUncalibrated
</UL>

<P><STRONG><a name="[7f]"></a>rls_core_Carlson4_fxp</STRONG> (Thumb, 520 bytes, Stack size unknown bytes, math_utils_fxp.c.obj(.text.rls_core_Carlson4_fxp))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15_with_pow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q15_fxp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_inverse_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1
</UL>

<P><STRONG><a name="[135]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[159]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[15a]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[121]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Printf
</UL>

<P><STRONG><a name="[138]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[126]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_roll
</UL>

<P><STRONG><a name="[125]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yaw
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pitch
</UL>

<P><STRONG><a name="[13a]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[13d]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[13c]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[139]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[15b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[137]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf_full.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b4]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[111]"></a>LL_FLASH_GetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_FLASH_GetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[110]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bc]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_LOW
</UL>

<P><STRONG><a name="[bb]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_SPI_CS_HIGH
</UL>

<P><STRONG><a name="[6a]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, main.o(.text.LL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LED_TOG
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LED_TOG
</UL>

<P><STRONG><a name="[112]"></a>LL_PWR_EnableRange1BoostMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_PWR_EnableRange1BoostMode))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11c]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[114]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[113]"></a>LL_RCC_HSE_EnableBypass</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_EnableBypass))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[115]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[116]"></a>LL_RCC_PLL_ConfigDomain_SYS</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, main.o(.text.LL_RCC_PLL_ConfigDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[118]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[117]"></a>LL_RCC_PLL_EnableDomain_SYS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_EnableDomain_SYS))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[119]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11d]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11e]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[120]"></a>LL_RCC_SetFDCANClockSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetFDCANClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetFDCANClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11a]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f8]"></a>LL_SPI_ReceiveData8</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.LL_SPI_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>LL_SPI_TransmitData8</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.LL_SPI_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_write_reg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_read_reg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INT
</UL>

<P><STRONG><a name="[106]"></a>apply_mounting_matrix</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, main.o(.text.apply_mounting_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_mounting_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[53]"></a>read_reg_asf</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, main.o(.text.read_reg_asf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_reg_asf &rArr; icm42688_read_reg &rArr; ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.ICM_INT)
</UL>
<P><STRONG><a name="[55]"></a>sleep_us_asf</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(.text.sleep_us_asf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sleep_us_asf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.ICM_INT)
</UL>
<P><STRONG><a name="[54]"></a>write_reg_asf</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, main.o(.text.write_reg_asf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_reg_asf &rArr; icm42688_write_reg &rArr; ICM_SPI_CS_LOW &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm42688_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.ICM_INT)
</UL>
<P><STRONG><a name="[de]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[df]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[93]"></a>LL_RCC_SetFDCANClockSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fdcan.o(.text.LL_RCC_SetFDCANClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetFDCANClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[e3]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e2]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[eb]"></a>LL_SPI_Enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text.LL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ea]"></a>LL_SPI_EnableIT_RXNE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text.LL_SPI_EnableIT_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_EnableIT_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e9]"></a>LL_SPI_EnableNSSPulseMgt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text.LL_SPI_EnableNSSPulseMgt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_EnableNSSPulseMgt
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e8]"></a>LL_SPI_SetStandard</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi.o(.text.LL_SPI_SetStandard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_SetStandard
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, spi.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[e6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, spi.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[b0]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(.text.LL_RCC_SetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[d3]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[d4]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 156 bytes, Stack size 60 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[d5]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[d1]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[d2]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[d0]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[92]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, stm32g4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a7]"></a>SysTick_Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32g4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[9f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[a0]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[a3]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[d7]"></a>LL_SPI_IsEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_ll_spi.o(.text.LL_SPI_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[d9]"></a>LL_SPI_SetCRCPolynomial</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32g4xx_ll_spi.o(.text.LL_SPI_SetCRCPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_SetCRCPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[d8]"></a>LL_SPI_SetRxFIFOThreshold</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g4xx_ll_spi.o(.text.LL_SPI_SetRxFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_SetRxFIFOThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[124]"></a>UART_EndRxTransfer</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32g4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[a9]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[128]"></a>inv_icm426xx_inline_authenticate_device</STRONG> (Thumb, 3240 bytes, Stack size unknown bytes, invn_algo_asf.c.obj(.text.inv_icm426xx_inline_authenticate_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = inv_icm426xx_inline_authenticate_device &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_algo_asf_init
</UL>

<P><STRONG><a name="[74]"></a>GyroBiasTrackerFxp_ValidateBias.part.0</STRONG> (Thumb, 732 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_ValidateBias.part.0))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[75]"></a>GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1</STRONG> (Thumb, 270 bytes, Stack size unknown bytes, gyro_bias_tracker_fxp.c.obj(.text.GyroBiasTrackerFxp_UpdateRLSQ15.constprop.1))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_core_Carlson4_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateMagData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroBiasTrackerFxp_UpdateAccData
</UL>

<P><STRONG><a name="[100]"></a>SphericalFxp_UpdateMag.part.0</STRONG> (Thumb, 2672 bytes, Stack size unknown bytes, spherical_fxp.c.obj(.text.SphericalFxp_UpdateMag.part.0))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpAdaptiveFilter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpScaleAndSaturate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fxpRecursiveVariance
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_acc_correction_fxp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_cross_product_q30
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_angle_from_mag_correction_fxp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_integrate_gyro_fast_trigo_fxp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_BtoI_fxp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_invert_fxp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_mult_fxp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_math_quat_rotate_ItoB_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SphericalFxp_UpdateMagData
</UL>

<P><STRONG><a name="[13e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[136]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[141]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[140]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
